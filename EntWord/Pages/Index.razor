@page "/"
@using EntWord.Data
@using System.Text.RegularExpressions

@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>

<div 
    style="width: 100%; height: 100vh;"
    @onkeydown="@Keydown"
    @onmousemove="@OnMouseMoveFocus"
    tabindex="1000"
    @ref="div"
>
    <div class="container" style="height: 100vh;">
        <div class="row align-items-center justify-content-center" style="height: 100vh;">
            <div class="col col-8 main-block">
                <div class="row align-items-center justify-content-center" style="height: 100%;">
                    <div class="col">
                        @if (process == status.Waiting)
                        {
                            <button type="button" class="btn btn-primary" @onclick="@OnClickStart" style="font-size: 48px;">開始</button>
                        }
                        @if (process == status.Ready)
                        {
                            <h1><strong>@countdown</strong></h1>
                        }
                        @if (process == status.Starting)
                        {
                            <h5>@gameTime</h5>
                            <h1 class="@($"text-{inputStatus}")">
                                @currentWord
                            </h1>
                            <h1>
                                @inputWord
                            </h1>
                        }
                        @if (process == status.End)
                        {
                            <h1>Completed: @completed</h1>
                            @if (completed < 50)
                            {
                                <h2>還要再加強!</h2>
                            }
                            else if (completed >=50 && completed < 100)
                            {
                                <h2>不錯，再加油!</h2>
                            }
                            else if (completed >= 100 && completed < 200)
                            {
                                <h2>很厲害喔!</h2>
                            }
                            else
                            {
                                <h2>你是神嗎？</h2>
                            }
                            <button type="button" class="btn btn-primary" @onclick="@OnClickClose" style="font-size: 48px;">結束</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    // 開始倒數時間設定
    readonly int _countdown = 3;

    // 測驗時間設定
    readonly int _gameTime = 60;

    /// <summary>
    /// 狀態清單
    /// Waiting: 等待，畫面顯示開始按鈕
    /// Ready: 執行倒時計時
    /// Starting: 開始測驗
    /// End: 結束測驗，顯示成績
    /// </summary>
    enum status { Waiting, Ready, Starting, End }

    // 狀態
    status process = status.Waiting;
    
    // 輸入樣式
    string inputStatus = "primary";

    // 主圖層
    ElementReference div;

    // 單字庫
    List<string> words = new();

    // 鍵盤輸入的字串
    string inputWord = "";

    // 倒數時間
    int countdown = 0;

    // 測驗時間
    int gameTime = 0;

    // 完成次數
    int completed = 0;

    // 單字索引
    int wordIndex = 0;

    // 目前的單字
    string currentWord = "";

    /// <summary>
    /// 畫面渲染後執行的前置工作
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        // 第一次渲染
        if (firstRender) 
        {
            // 將元件焦點在主圖層
            await JSRuntime.InvokeVoidAsync("SetFocusToElement", div);
        }
    }  

    /// <summary>
    /// 按下Start
    /// </summary>
    /// <returns></returns>
    async Task OnClickStart()
    {
        // 變更狀態Ready
        // 設定倒數3秒
        process = status.Ready;
        countdown = 3;
        StateHasChanged();
        while (countdown >= 0)
        {
            await Task.Delay(1000);
            countdown--;
            StateHasChanged();
            if (countdown == 0)
            {
                // 倒數完畢，初始化測驗狀態
                words = Words.Shuffle();
                process = status.Starting;
                gameTime = _gameTime;
                completed = 0;
                wordIndex = 0;
                currentWord = words[wordIndex];
                StateHasChanged();
                // 執行測驗倒數
                var timesover = await GameTimeCountdown();
                if (timesover)
                {
                    inputWord = "";
                    process = status.End;
                    StateHasChanged();
                }
            }
        }
        await Task.CompletedTask;
    }

    /// <summary>
    /// 按下Close
    /// </summary>
    /// <returns></returns>
    async Task OnClickClose()
    {
        // 設定狀態為Waiting
        process = status.Waiting;
        StateHasChanged();
        await Task.CompletedTask;
    }

    async Task<bool> GameTimeCountdown()
    {
        // 倒數測驗時間
        while (gameTime >= 0)
        {
            if (gameTime > 0)
            {
                gameTime--;
                StateHasChanged();
                await Task.Delay(1000);
            }
            else
            {
                return true;
            }
        }
        return true;
    }

    /// <summary>
    /// 當滑鼠移入畫面時，將控制焦點設定於主畫面圖層
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    async Task OnMouseMoveFocus(MouseEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("SetFocusToElement", div);
    }

    /// <summary>
    /// 監聽鍵盤按下事件
    /// </summary>
    /// <param name="e"></param>
    async Task Keydown(KeyboardEventArgs e)
    {
        // 設定正則表達式，比對英文字a-z
        var rgx = new Regex(@"^[a-z]");
        var isMatch = rgx.IsMatch(e.Key.ToLower());
        if (e.Code.ToLower() == "space")
        {
            // 比對輸入字串與現在顯示單字
            if (inputWord == currentWord)
            {
                completed++;
            }
            wordIndex++;
            // 如果所有單字已出完，則重新洗牌
            if (wordIndex == words.Count)
            {
                words = Words.Shuffle();
                wordIndex = 0;
            }
            currentWord = words[wordIndex];
            inputWord = "";
            StateHasChanged();
        }
        // 按下backspace，刪除最右邊的字串
        else if (e.Code.ToLower() == "backspace")
        {
            if (inputWord.Length > 0)
            {
                inputWord = inputWord.Substring(0, inputWord.Length - 1);
            }
        }
        // 按下a-z時，寫入輸入字串
        else if (isMatch && e.Key.Length == 1)
        {
            inputWord += $"{e.Key}";
        }
        await Task.CompletedTask;
    }
}
